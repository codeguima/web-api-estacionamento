// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Estacionamento.Migrations
{
    [DbContext(typeof(EstacionamentoDbContext))]
    [Migration("20231120052842_criacao1")]
    partial class criacao1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Property<string>("_Cpf")
                        .HasColumnType("TEXT");

                    b.Property<string>("_Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("_Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("_Cpf");

                    b.ToTable("cliente");
                });

            modelBuilder.Entity("ClienteVeiculo", b =>
                {
                    b.Property<string>("Clientes_Cpf")
                        .HasColumnType("TEXT");

                    b.Property<string>("Veiculos_Placa")
                        .HasColumnType("TEXT");

                    b.HasKey("Clientes_Cpf", "Veiculos_Placa");

                    b.HasIndex("Veiculos_Placa");

                    b.ToTable("ClienteVeiculo");
                });

            modelBuilder.Entity("Marca", b =>
                {
                    b.Property<int?>("_idMarca")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("_nomeMarca")
                        .HasColumnType("TEXT");

                    b.Property<string>("_segmento")
                        .HasColumnType("TEXT");

                    b.HasKey("_idMarca");

                    b.ToTable("marca");
                });

            modelBuilder.Entity("Modelo", b =>
                {
                    b.Property<int?>("_idModelo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Marca_idMarca")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("_AnoModelo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("_TipoModelo")
                        .HasColumnType("TEXT");

                    b.Property<int?>("_idMarca")
                        .HasColumnType("INTEGER");

                    b.Property<string>("_nomeModelo")
                        .HasColumnType("TEXT");

                    b.HasKey("_idModelo");

                    b.HasIndex("Marca_idMarca");

                    b.ToTable("modelo");
                });

            modelBuilder.Entity("NotaFiscal", b =>
                {
                    b.Property<int?>("_NumeroNota")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cliente_Cpf")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Servico_idServico")
                        .HasColumnType("INTEGER");

                    b.Property<string>("_Cpf")
                        .HasColumnType("TEXT");

                    b.Property<double?>("_ValorDaNota")
                        .HasColumnType("REAL");

                    b.Property<int?>("_idServico")
                        .HasColumnType("INTEGER");

                    b.HasKey("_NumeroNota");

                    b.HasIndex("Cliente_Cpf");

                    b.HasIndex("Servico_idServico");

                    b.ToTable("notafiscal");
                });

            modelBuilder.Entity("Servico", b =>
                {
                    b.Property<int?>("_idServico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NotaFiscal_NumeroNota")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Ticket_idTicket")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Veiculo_Placa")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("_Pagamento")
                        .HasColumnType("INTEGER");

                    b.Property<string>("_codTicket")
                        .HasColumnType("TEXT");

                    b.Property<string>("_tipoServico")
                        .HasColumnType("TEXT");

                    b.Property<double?>("_valorServico")
                        .HasColumnType("REAL");

                    b.HasKey("_idServico");

                    b.HasIndex("NotaFiscal_NumeroNota");

                    b.HasIndex("Ticket_idTicket");

                    b.HasIndex("Veiculo_Placa");

                    b.ToTable("servico");
                });

            modelBuilder.Entity("Ticket", b =>
                {
                    b.Property<int?>("_idTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Veiculo_Placa")
                        .HasColumnType("TEXT");

                    b.Property<string>("_HoraEntrada")
                        .HasColumnType("TEXT");

                    b.Property<string>("_HoraSaida")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("_Pagamento")
                        .HasColumnType("INTEGER");

                    b.Property<string>("_Placa")
                        .HasColumnType("TEXT");

                    b.Property<string>("_codTicket")
                        .HasColumnType("TEXT");

                    b.HasKey("_idTicket");

                    b.HasIndex("Veiculo_Placa");

                    b.ToTable("ticket");
                });

            modelBuilder.Entity("Veiculo", b =>
                {
                    b.Property<string>("_Placa")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Modelo_idModelo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("_Cor")
                        .HasColumnType("TEXT");

                    b.Property<int?>("_idModelo")
                        .HasColumnType("INTEGER");

                    b.HasKey("_Placa");

                    b.HasIndex("Modelo_idModelo");

                    b.ToTable("veiculo");
                });

            modelBuilder.Entity("ClienteVeiculo", b =>
                {
                    b.HasOne("Cliente", null)
                        .WithMany()
                        .HasForeignKey("Clientes_Cpf")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Veiculo", null)
                        .WithMany()
                        .HasForeignKey("Veiculos_Placa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modelo", b =>
                {
                    b.HasOne("Marca", "Marca")
                        .WithMany()
                        .HasForeignKey("Marca_idMarca");

                    b.Navigation("Marca");
                });

            modelBuilder.Entity("NotaFiscal", b =>
                {
                    b.HasOne("Cliente", "Cliente")
                        .WithMany("NotaFiscais")
                        .HasForeignKey("Cliente_Cpf");

                    b.HasOne("Servico", "Servico")
                        .WithMany()
                        .HasForeignKey("Servico_idServico");

                    b.Navigation("Cliente");

                    b.Navigation("Servico");
                });

            modelBuilder.Entity("Servico", b =>
                {
                    b.HasOne("NotaFiscal", null)
                        .WithMany("Servicos")
                        .HasForeignKey("NotaFiscal_NumeroNota");

                    b.HasOne("Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("Ticket_idTicket");

                    b.HasOne("Veiculo", null)
                        .WithMany("Servicos")
                        .HasForeignKey("Veiculo_Placa");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Ticket", b =>
                {
                    b.HasOne("Veiculo", "Veiculo")
                        .WithMany("Tickets")
                        .HasForeignKey("Veiculo_Placa");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("Veiculo", b =>
                {
                    b.HasOne("Modelo", "Modelo")
                        .WithMany()
                        .HasForeignKey("Modelo_idModelo");

                    b.Navigation("Modelo");
                });

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Navigation("NotaFiscais");
                });

            modelBuilder.Entity("NotaFiscal", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("Veiculo", b =>
                {
                    b.Navigation("Servicos");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
